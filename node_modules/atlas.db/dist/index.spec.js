"use strict";
<<<<<<< HEAD
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const Atlas = __importStar(require("./"));
const Database = new Atlas.Database();
const MainStructures = new Atlas.Structure({
    totalVisits: { type: Array, default: [] },
    totalGenerations: { type: Number, default: 0 },
    visits: { type: Array, default: [] },
    generations: { type: Array, default: [] }
});
const Main = Database.createTable('main', MainStructures);
const main = Main.get('main') || Main.create({
    id: 'main',
    totalVisits: [],
    totalGenerations: 0,
    visits: []
});
if (main) {
    (_a = main.generations) === null || _a === void 0 ? void 0 : _a.push('oi');
    main.save();
=======
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = require("./entities/Database");
const Structure_1 = require("./entities/Structure");
const Atlas = new Database_1.Database();
const UsersStructure = new Structure_1.Structure({
    id: { type: String },
    cooldowns: { type: Set, default: new Set() }
});
const Users = Atlas.createTable('users', UsersStructure);
const user = Users.get('drezzy') || Users.create({
    id: 'drezzy',
    cooldowns: new Set()
});
if (user) {
    user.cooldowns.add('i');
    user.save();
>>>>>>> 4339307990cad4e149fdc0fcc5989511f87e38f7
}
