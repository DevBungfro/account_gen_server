"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const fs_1 = __importDefault(require("fs"));
const create_file_if_not_exists_1 = __importDefault(require("../lib/create-file-if-not-exists"));
const generate_data_with_save_1 = __importDefault(require("../lib/generate-data-with-save"));
const query_conditions_1 = require("../exports/query-conditions");
const query_functions_1 = require("../lib/query/query-functions");
class Table {
    constructor(name, path, structure) {
        this.name = name;
        this.path = path;
        this.structure = structure;
    }
    data() {
        (0, create_file_if_not_exists_1.default)(this.path, '[]');
        const data = fs_1.default.readFileSync(this.path, 'utf-8');
        return JSON.parse(data);
    }
    create(props) {
<<<<<<< HEAD
        if (!(props === null || props === void 0 ? void 0 : props.id))
=======
        if (!props?.id)
>>>>>>> 4339307990cad4e149fdc0fcc5989511f87e38f7
            return;
        const data = this.data();
        const existsIdInTable = data.find((ref) => ref.id === props.id);
        if (existsIdInTable)
            return;
        const newData = props;
        Object.entries(this.structure.defaultData).forEach(([ref, val]) => {
            if (props[ref])
                return;
            newData[ref] = val;
        });
        data.push(newData);
        fs_1.default.writeFileSync(this.path, JSON.stringify(data, null, 2), 'utf-8');
        return (0, generate_data_with_save_1.default)(this.path, newData, this.structure);
    }
    get(id) {
        if (!id)
            return;
        const data = this.data().find((ref) => ref.id === id);
        if (data)
            return (0, generate_data_with_save_1.default)(this.path, data, this.structure);
    }
    find(func, thisArg) {
        if (!func)
            return;
        const data = this.data().find(func);
        if (data)
            return (0, generate_data_with_save_1.default)(this.path, data, this.structure);
    }
    remove(id) {
        if (!id)
            return false;
        const reference = this.get(id);
        if (!reference)
            return false;
        let data = this.data();
        data.splice(data.indexOf(reference), 1);
        fs_1.default.writeFileSync(this.path, JSON.stringify(data, null, 2), 'utf-8');
        return true;
    }
    clear() {
        fs_1.default.writeFileSync(this.path, '[]', 'utf-8');
        return true;
    }
    query(query) {
        const structureKeys = Object.keys(this.structure.props);
<<<<<<< HEAD
        const queryKeys = !Array.isArray(query === null || query === void 0 ? void 0 : query.$include) ? [query.$include] : query === null || query === void 0 ? void 0 : query.$include;
        let validQueryKeys = queryKeys.filter(k => structureKeys.includes(k));
        validQueryKeys = validQueryKeys.filter((k) => {
            var _a;
            return ((_a = this.structure.props[k]) === null || _a === void 0 ? void 0 : _a.type) == this.structure.props[validQueryKeys[0]].type;
=======
        const queryKeys = !Array.isArray(query?.$include) ? [query.$include] : query?.$include;
        let validQueryKeys = queryKeys.filter(k => structureKeys.includes(k));
        validQueryKeys = validQueryKeys.filter((k) => {
            return this.structure.props[k]?.type == this.structure.props[validQueryKeys[0]].type;
>>>>>>> 4339307990cad4e149fdc0fcc5989511f87e38f7
        });
        if (!validQueryKeys)
            return null;
        const queryType = this.structure.props[validQueryKeys[0]].type.name;
        const queryConditions = query_conditions_1.QueryConditions[queryType];
<<<<<<< HEAD
        const validConditions = Object.keys((query === null || query === void 0 ? void 0 : query.$where) || [])
            .filter(c => queryConditions.includes(c));
        const conditionsValue = Object.entries((query === null || query === void 0 ? void 0 : query.$where) || [])
=======
        const validConditions = Object.keys(query?.$where || [])
            .filter(c => queryConditions.includes(c));
        const conditionsValue = Object.entries(query?.$where || [])
>>>>>>> 4339307990cad4e149fdc0fcc5989511f87e38f7
            .filter(([ref, val]) => queryConditions.includes(ref))
            .map(([ref, val]) => val);
        if (!validConditions)
            return null;
        const data = this.data();
        const result = [];
        data.forEach((crrData) => {
            let validData = validQueryKeys.map(k => crrData[k]);
            let validateResult;
            validConditions.forEach((condition, i) => {
                const execute = query_functions_1.queryFunctions[queryType][condition];
                validateResult = execute(conditionsValue[i], validData);
                if (!validateResult) {
                    validData = [];
                }
                if (i + 1 == validConditions.length && validData.length && validateResult)
                    result.push(crrData);
            });
        });
        return result;
    }
}
exports.Table = Table;
